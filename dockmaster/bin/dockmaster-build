#!/bin/bash

################################################################################
## Name    : Dockmaster-Build (Docker Builder)                                ##
## Usage   : dockmaster build --help or man dockmaster-build                  ##
## Author  : Evan Shipman                                                     ##
## Descr.  : This tool is designed to build a docker container and systemd    ##
##           service file for managing it.                                    ##
##           For example:                                                     ##
##               dockmaster-build -c bitwarden -i bitwarden/server:aarch64    ##
##                   -a "-p 80:80" -s bitwarden.service                       ##
##                   -v "/etc/docker/bitwarden/bw_data:/data"                 ##
##           The above command will create a docker container with the        ##
##           specified image, mapped ports, and volume. It will also create a ##
##           systemd service file for starting/stopping the container.        ##
## Changes : v1.0 - Initial creation.                                         ##
##           v1.1 - Added dockmaster-build                                    ##
################################################################################

NAME="dockmaster-build"
VERSION="1.1"
COPYRIGHT="Copyright (C) 2020 Evan Shipman"
HEADER="$NAME version $VERSION
$COPYRIGHT
License MIT: https://opensource.org/licenses/MIT"

# The image to install in a container
image=""

# The desired name of the container
container=""

# The arguments to build the container with container
has_container_args=false
container_args=""

# Whether a systemd service will be built or not
# The desired name of the service file
systemd=false
service=""

# The list of volumes/mounts for the container
has_volumes=false
volumes=("")

# The network for the container
has_network=false
network=""

# Whether to print verbose output
verbose=false

# Whether to print help and exit
print_help=false

# Whether to print the version number and exit
print_version=false

# The environment file for the container
has_env_file=false
env_file=""

SYSTEMD_TEMPLATE="[Unit]
Description=XXXXXX Docker Service
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/etc/docker/yyyyyy
ExecStart=/usr/bin/docker start zzzzzz
ExecStop=/usr/bin/docker stop zzzzzz
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
"

# Print the usage of this script
# $0 - $0 of this script, the command executed calling this script
function print_usage {
    echo "Usage: $0 [OPTIONS]"
    echo
    echo "Options:"
    echo
    echo "    [-i | --image] image_name             Build the container with the given"
    echo "                                          image"
    echo "    [-c | --container] container_name     Build a container with the given name"
    echo "    [-a | --args] \"container_args\"      Arguments to run the built container"
    echo "                                          with"
    echo "    [-s | --systemd] systemd_service      Build a systemd service file"
    echo "    [-V | --volume] \"fs:docker\"         Mount the filesystem location to the"
    echo "                                          docker location (Can be specified"
    echo "                                          more than once)"
    echo "    [-n | --network] \"network_spec\"     The network to configure the container with"
    echo "    [-E | --env-file] environment_file    Add the environment file to the container"
    echo "    [-v | --verbose]                      Print verbose output"
    echo "    [-h | --help]                         Print this output"
    echo "    [-e | --version]                      Print version and exit"
    echo
}


# Parse the command line arguments
ARGS=""
while (( "$#" )); do
    case "$1" in
        -c|--container|--container=*)
            # Allow for short/long/long= argument
            # Set the container's name
            if [[ "$1" == "--container="* ]]; then
                container="$(echo "$1" | sed -e 's/^--container=//')"
            elif [[ "$1" == "--container" || "$1" == "-c" ]]; then
                container="$2"
                shift
            fi
            shift
            ;;
        -a|--args|--args=*)
            # Allow for short/long/long= argument
            # Set the updated container's arguments
            if [[ "$1" == "--args="* ]]; then
                container_args="$(echo "$1" | sed -e 's/^--args=//')"
            elif [[ "$1" == "--args" || "$1" == "-a" ]]; then
                container_args="$2"
                shift
            fi
            has_container_args=true
            shift
            ;;
        -s|--systemd|--systemd=*)
            # Allow for short/long/long= argument
            # Set the systemd service name
            if [[ "$1" == "--systemd="* ]]; then
                systemd_name="$(echo "$1" | sed -e 's/^--systemd=//')"
            elif [[ "$1" == "--systemd" || "$1" == "-s" ]]; then
                systemd_name="$2"
                shift
            fi

            # Add .service if wasn't input
            if [[ "$systemd_name" != *".service" ]]; then
                systemd_name+=".service"
            fi
            
            systemd=true
            shift
            ;;
        -i|--image|--image=*)
            # Allow for short/long/long= argument
            # Set the image name
            if [[ "$1" == "--image="* ]]; then
                image="$(echo "$1" | sed -e 's/^--image=//')"
            elif [[ "$1" == "--image" || "$1" == "-i" ]]; then
                image="$2"
                shift
            fi
            shift
            ;;
        -V|--volume|--volume=*)
            # Allow for short/long/long= argument
            # Add the volume to the list
            if [[ "$1" == "--volume="* ]]; then
                volumes+=("$(echo "$1" | sed -e 's/^--volume=//')")
            elif [[ "$1" == "--volume" || "$1" == "-V" ]]; then
                volumes+=("$2")
                shift
            fi
            has_volumes=true
            shift
            ;;
        -E|--env-file|--env-file=*)
            # Allow for short/long/long= argument
            # Set the environment file for the container
            if [[ "$1" == "--env-file="* ]]; then
                env_file="$(echo "$1" | sed -e 's/^--env-file//')"
            elif [[ "$1" == "--env-file" || "$1" == "-E" ]]; then
                env_file="$2"
                shift
            fi
            has_env_file=true
            shift
            ;;
        -n|--network|--network=*)
            # Allow for short/long/long= argument
            # Set the network for the container
            if [[ "$1" == "--network="* ]]; then
                network="$(echo "$1" | sed -e 's/^--network//')"
            elif [[ "$1" == "--network" || "$1" = "-n" ]]; then
                network="$2"
                shift
            fi
            has_network=true
            shift
            ;;
        -v|--verbose)
            # Allow for short/long argument
            # Set whether to print verbose
            verbose=true
            shift
            ;;
        -h|--help)
            # Allow for short/long argument
            # Set whether to print help
            print_help=true
            shift
            ;;
        -e|--version)
            # Allow for short/long argument
            # Set whether to print the version info
            print_version=true
            shift
            ;;
        *)
            ARGS="$ARGS $1"
            shift
            ;;
    esac
done

# Set the positional args
eval set -- "$ARGS"

# If help was requested, print the help and exit
if $print_help; then
    echo "$HEADER"
    echo
    print_usage "$0"
    exit
fi

if $print_version; then
    echo "$HEADER"
    exit
fi

# Make sure this is run as root
# Check after arg parsing so --help can be run without root
if [[ "$EUID" -ne "0" ]]; then
    echo "Error: Must be run as root" >&2
    exit 1
fi

# If a container or image was not specified, print an error and print the usage
# to stderr before exiting
if [[ -z "$container" || -z "$image" ]]; then
    echo "Error: Must specify a container and image" >&2
    echo "$(print_usage "$0")" >&2
    exit
fi

# Ask the user to verify the information
echo
echo -e -n "\e[1;33mINFO\e[0m: "
echo       "Verify that the information below is correct."
echo

# Print the container name but outside of the -e
echo -ne "    Container to build  : '\e[1;33m"
echo -n  "$container"
echo -e  "\e[0m'"

# Print the image name but outside of the -e
echo -ne "    Image to use        : '\e[1;33m"
echo -n  "$image"
echo -e  "\e[0m'"

# Print the volumes to mount
if $has_volumes; then
    echo -ne "    Volume(s) to mount  : "
    printed=0
    for vol in ${volumes[@]}; do
        if [[ $printed -gt 0 ]]; then 
            echo -n "                          "
        fi
        echo -ne "'\e[1;33m"
        echo -n  "$vol"
        echo -e "\e[0m'"
        printed=$((printed+1))
    done
fi

# Print the environment file
if $has_env_file; then
    echo -ne "    Environment file    : '\e[1;33m"
    echo -n  "$env_file"
    echo -e  "\e[0m'"
fi

# Print the network configuration
if $has_network; then
    echo -ne "    Network config      : '\e[1;33m"
    echo -n  "$network"
    echo -e  "\e[0m'"
fi

# Print the arguments to run with the built container but outside of -e
if $has_container_args; then
    echo -ne "    Run arguments       : '\e[1;33m"
    echo -n  "$container_args"
    echo -e  "\e[0m'"
fi

# If the user specified a systemd service, print its name
if $systemd; then
    echo -ne "    Systemd service     : '\e[1;33m"
    echo -n  "$systemd_name"
    echo -e  "\e[0m'"
fi

echo

exit

# Default to no
proceed="no"

# Prompt the user to verify the parameters
read -p "Do you wish to continue with the parameters above? [y/N]: " proceed

# If the user agrees, continue
if echo -n "$proceed" | grep -Ei '^(y|yes)$' >/dev/null 2>&1; then
    echo "Proceeding with operations ... "
    echo
else
    echo "Exiting"
    exit 1
fi

echo

########################################
## Conflict checking
########################################

if $verbose; then
    echo "Checking for conflicts:"

    # Look for an existing container
    echo "    docker ps -a | grep $container"
    docker ps -a | grep $container

    if [[ "$?" -eq "0" ]]; then
        # Default continue to no
        proceed="no"

        read -p "Would you like to stop and delete the existing container? [y/N]: " proceed

        # If the user agrees, continue
        if echo -n "$proceed" | grep -Ei '^(y|yes)$' >/dev/null 2>&1; then
            # Stop the existing container
            echo "    docker stop $container"
            docker stop $container

            # Delete the existing container
            echo "    docker rm $container"
            docker rm $container

            echo
        else
            echo "Exiting"
            exit 1
        fi
    fi #end if existing container

    # Check if the service file already exists
    echo "    ls -alh /etc/systemd/system | grep $systemd_name"
    ls -alh /etc/systemd/system | grep $systemd_name
    if [[ -d "/etc/systemd/system/$systemd_name" ]]; then
        # Default continue to no
        proceed="no"

        # Prompt the user to continue
        read -p "Systemd service already exists. Would you like to delete it? [y/N]: " proceed

        # If the user agrees, continue
        if echo -n "$proceed" | grep -Ei '^(y|yes)$' >/dev/null 2>&1; then
            # Delete the existing service file
            echo "rm \"/etc/systemd/system/$systemd_name\""
            rm "/etc/systemd/system/$systemd_name"
        else
            echo "Exiting"
            exit 1
        fi
    fi # end if service already exists
# end if verbose
else
    echo -n "Checking for existing container ... "

    # Check if there is already a container by that name
    if [[ "$(docker ps -a | grep $container)" ]]; then
        echo -e "\e[1;31mFOUND\e[0m"

        # Check if it's running
        running=false
        if [[ "$(docker container inspect -f '{{.State.Status}}' "$container" )" == "running" ]]; then
            running=true
        fi

        # Default continue to no
        proceed="no"

        # Alert the user that there's already a container and prompt to continue
        if ! $running; then
            echo -e "There appears to be a \e[1;33mnon-running\e[0m container by the same name."
        else
            echo -e "There appears to be a \e[1;31mrunning\e[0m container by the same name."
        fi
        read -p "Would you like to stop and delete it? [y/N]: " proceed

        # If the user agrees, continue
        if echo -n "$proceed" | grep -Ei '^(y|yes)$' >/dev/null 2>&1; then
            # Stop the existing container if it's running
            if $running; then
                echo "Stopping the container ... "

                docker stop $container >/dev/null 2>&1
                if [[ "$?" -eq "0" ]]; then
                    echo -e "\e[1;32mDONE\e[0m"
                else
                    echo -e "\e[1;31mFAILED\e[0m"
                fi
            fi

            # Delete the existing container
            echo "Deleting the container ... "

            docker rm $container >/dev/null 2>&1
            if [[ "$?" -eq "0" ]]; then
                echo -e "\e[1;32mDONE\e[0m"
            else
                echo -e "\e[1;31mFAILED\e[0m"
            fi
            echo
        # end if proceed
        else
            echo "Exiting"
            exit 1
        fi #end if don't proceed
    # end if existing container
    else
        echo -e "\e[1;32mNONE\e[0m"
    fi # end if existing container

    if $systemd; then
        echo "Checking for existing service ... "

        if [[ -d "/etc/systemd/system/$systemd_name" ]]; then
            echo -e "\e[1;31mFOUND\e[0m"
            
            # Default continue to no
            proceed="no"

            # Prompt the user to continue
            read -p "Systemd service already exists. Would you like to delete it? [y/N]: " proceed

            # If the user agrees, continue
            if echo -n "$proceed" | grep -Ei '^(y|yes)$' >/dev/null 2>&1; then
                echo "Deleting the service ... "

                # Delete the existing service file
                rm "/etc/systemd/system/$systemd_name" >/dev/null 2>&1
                if [[ "$?" -eq "0" ]]; then
                    echo -e "\e[1;32mDONE\e[0m"
                else
                    echo -e "\e[1;31mFAILED\e[0m"
                fi
            fi
        # end if service already exists
        else
            echo -e "\e[1;32mNONE\e[0m"
        fi
    fi #end if sytemd
fi #end if not verbose

########################################
## Pull the image
########################################

# If verbose, show output from docker pull
if $verbose; then
    echo "Pulling $image:"

    # Pull the image
    echo "    docker pull \"$image\""
    docker pull "$image"

    # If it couldn't be done, error and exit
    if [[ "$?" -ne "0" ]]; then
        echo "\e[1;31mError\e[0m: Operation failed" >&2
        exit 1
    fi
    echo
# end if $verbose
else
    echo -n "Pulling $image ... "

    # Pull the image, hiding the output
    docker pull "$image" >/dev/null 2>&1

    # If it couldn't be done, error and exit
    # If it worked, print that it finished
    if [[ "$?" -ne "0" ]]; then
        echo -e "\e[1;31mFAILED\e[0m"
        echo "Exiting"
        exit 1
    else
        echo -e "\e[1;32mDONE\e[0m"
    fi
fi
# end if ! $verbose


########################################
## Prepare the mounts
########################################

# Get the list of volume mounts for this container
VOL_OPT=""
if $has_volumes; then
    for vol in ${volumes[@]}; do
        errors=""
        num_errors=0

        # Get the local filesystem's name
        fs="$(echo "$vol" | cut -d: -f1)"

        if $verbose; then
            echo "Preparing volume $vol:"

            # If it doesn't exist, make it
            if [[ ! -d "$fs" ]]; then
                echo "    mkdir -p \"$fs\""
                mkdir -p "$fs"
            fi

            # Set the ownership and permissions
            echo "    chown -R docker:docker \"$fs\""
            chown -R docker:docker "$fs"
            echo "    chmod -R g-rwx,o-rwx \"$fs\""
            chmod -R g-rwx,o-rwx "$fs"

            # Add to the volume argument string
            VOL_OPT+=" --volume \"$vol\" "
        else
            echo "Preparing $vol ... "

            # If it doesn't exist, make it
            if [[ ! -d "$fs" ]]; then
                errors+="$(mkdir -p "$fs" 2>&1)"
                if [[ "$?" -ne "0" ]]; then
                    num_errors=$((num_errors + 1))
                fi
            fi

            # Set the ownership
            errors+="$(chown -R docker:docker "$fs" 2>&1)"
            if [[ "$?" -ne "0" ]]; then
                num_errors=$((num_errors + 1))
            fi

            # Set the permissions
            errors+="$(chmod -R g-rwx,o-rwx "$fs" 2>&1)"
            if [[ "$?" -ne "0" ]]; then
                num_errors=$((num_errors + 1))
            fi

            if [[ "$num_errors" -eq "0" ]]; then
                # Add to the volume argument string
                VOL_OPT+=" --volume \"$vol\" "
                
                echo -e "\e[1;32mSUCCESS\e[0m"
            else
                echo -e "\e[1;31mFAILED\e[0m"
                echo "$errors"
            fi

        fi
    done
fi

########################################
## Build the env arg
########################################

ENV_ARG=""
if $has_env_file; then
    ENV_ARG=" --env-file $env_file "
fi

########################################
## Build the network arg
########################################

NET_ARG=""
if $has_network; then
    NET_ARG=" --network $network "
fi

########################################
## Build the misc arg
########################################

MISC_ARG=""
if $has_container_args; then
    MISC_ARG=" $container_args "
fi

########################################
## Build the image arg
########################################

IMAGE_ARG="$image"

########################################
## Build the container
########################################

if $verbose; then
    # Create the docker container
    echo "docker create --name \"$container\" $VOL_OPT $NET_ARG $MISC_ARG $IMAGE_ARG"
    docker create --name "$container" $VOL_OPT $NET_ARG $MISC_ARG $IMAGE_ARG
else
    echo -n "Building the container ... "

    # Create the docker container, capturing errors
    errors="$(docker create --name "$container" $VOL_OPT $NET_ARG $MISC_ARG $IMAGE_ARG 2>&1)"
    if [[ "$?" -eq "0" ]]; then
        echo -e "\e[1;31mFAILED\e[0m"
        echo "$errors"
    else
        echo -e "\e[1;32mDONE\e[0m"
    fi
fi

echo

########################################
## Build the service
########################################

if $systemd; then
    if $verbose; then
        # Write the contents of the service file
        echo "Building the systemd service:"
        echo "    echo "\$SYSTEMD_TEMPLATE" | \\"
        echo "            sed -e \"s/XXXXXX/${systemd_name}/g\" \\"
        echo "                -e \"s/zzzzzz/${container}/g\" > /etc/systemd/system/$systemd_name"
        echo "$SYSTEMD_TEMPLATE" | \
                sed -e "s/XXXXXX/${systemd_name}/g" \
                    -e "s/zzzzzz/${container}/g" > /etc/systemd/system/$systemd_name

        # Reload the services
        echo "systemctl daemon-reload"
        systemctl daemon-reload
    # end if verbose
    else
        errors=""
        num_errors=0

        echo -n "Creating the systemd service ... "

        # Write the service file
        echo "$SYSTEMD_TEMPLATE" | \
                sed -e "s/XXXXXX/${systemd_name}/g" \
                    -e "s/zzzzzz/${container}/g" > /etc/systemd/system/$systemd_name
        if [[ "$?" -ne "0" ]]; then
            num_errors=$((num_errors + 1))
        fi
        
        # And reload the services
        errors+="$(systemctl daemon-reload 2>&1)"
        if [[ "$?" -ne "0" ]]; then
            num_errors=$((num_errors + 1))
        fi

        if [[ "$num_errors" -ne "0" ]]; then
            echo -e "\e[1;31FAILED\e[0m"
            echo "$errors"
            exit 1
        else
            echo -e "\e[1;32mDONE\e[0m"
        fi
    fi # end if not verbose
fi #end if systemd

echo "Done"
